import json
import os
import nginx
from flask_menu import current_menu

import prism
from prism.config import JSONConfig
from prism.api.plugin import BasePlugin


class JackPlugin(BasePlugin):
    def init(self, prism_state):
        self._default_configs = [PHPConfig(), GUnicornConfig(), ReverseProxyConfig(), AdvancedConfig()]
        self._site_tabs = []

        self.nginx = NginxManager(prism_state, self)

    def add_default_config(self, inst):
        self._default_configs.append(inst)

    def get_default_configs(self):
        return self._default_configs

    def get_default_config(self, type_id):
        for config in self.get_default_configs():
            if config.type_id == type_id:
                return config
        return None

    def register_tab(self, tab):
        self._site_tabs.append(tab)


class NginxManager:
    def __init__(self, prism_state, jack_plugin):
        self._jack_plugin = jack_plugin

        self.config_folder = os.path.join(self._jack_plugin.data_folder, 'sites')
        if not os.path.exists(self.config_folder):
            os.makedirs(self.config_folder)

        self.config_location = self._jack_plugin.config('nginx-site-loc', '/etc/nginx/conf.d/')
        self.site_files_location = self._jack_plugin.config('site-files-loc', '/var/www/')

        self.configs = {}
        with prism_state.flask_app().app_context():
            for file_name in os.listdir(self.config_folder):
                site_config = JSONConfig(self.config_folder, file_name)

                self.configs[file_name[:-5]] = site_config

                item = current_menu.submenu(self._jack_plugin._endpoint + '.' + site_config['uuid'])
                item.register(self._jack_plugin._endpoint + '.JackSiteOverviewView', site_config['id'], 1,
                                endpoint_arguments_constructor=self.site_overview_construct(site_config['uuid']))

        self.rebuild_sites()

    def create_site(self, default_config, site_id, options):
        site_uuid = prism.generate_random_string(32)
        site_config = JSONConfig(self.config_folder, site_uuid + '.json')

        site_config['uuid'] = site_uuid
        site_config['id'] = site_id
        site_config['type'] = default_config.type_id

        site_config['listen'] = ['80', '[::]:80']
        site_config['locations'] = {}

        default_config.generate(site_config, *options)
        site_config.save()

        self.configs[site_config['uuid']] = site_config

        item = current_menu.submenu(self._jack_plugin._endpoint + '.' + site_config['uuid'])
        item.register(self._jack_plugin._endpoint + '.JackSiteOverviewView', site_config['id'], 1,
                        endpoint_arguments_constructor=self.site_overview_construct(site_config['uuid']))

        return site_config

    def site_overview_construct(self, site_uuid):
        def wrapper():
            return {'site_uuid': site_uuid}
        return wrapper

    def delete_site(self, site_uuid):
        del prism.flask_app().extensions['menu']._child_entries[self._jack_plugin._endpoint]._child_entries[site_uuid]
        self.configs[site_uuid].delete()
        del self.configs[site_uuid]
        os.remove(os.path.join(self.config_location, site_uuid + '.conf'))

        default_config = JackPlugin.get().get_default_config(site_config['type'])
        default_config.delete(site_config)

    def rebuild_sites(self):
        for uuid, config in self.configs.items():
            nginx_config = nginx.Conf()
            nginx_config.add(nginx.Comment('Generated by Prism CP. Any changes will be overwritten!'))

            server_block = nginx.Server()

            if 'listen' in config:
                for port in config['listen']:
                    server_block.add(nginx.Key('listen', port))
            if 'url_endpoint' in config:
                server_block.add(nginx.Key('server_name', config['url_endpoint']))
            for path, items in config['locations'].items():
                location_items = []
                for item, content in items.items():
                    if isinstance(content, tuple) or isinstance(content, list):
                        for c in content:
                            location_items.append(nginx.Key(item, c))
                    else:
                        location_items.append(nginx.Key(item, content))
                server_block.add(nginx.Location(path, *location_items))

            nginx_config.add(server_block)

            nginx.dumpf(nginx_config, os.path.join(self.config_location, config['uuid'] + '.conf'))
        prism.os_command('systemctl reload nginx.service')

class SiteTab:
    def __init__(self, title):
        self.uuid = prism.generate_random_string(8)
        self.title = title

    def render(self):
        pass

    def post(self):
        pass


from .views import *
from .widgets import *
from .site_configs import *
